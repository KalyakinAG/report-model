//  Подсистема "Модель отчета"
//	Автор: Калякин Андрей Г.
//  https://github.com/KalyakinAG/kassl
//  https://github.com/KalyakinAG/report-model

//@skip-check object-module-export-variable
//@skip-check module-accessibility-at-client

#Область ОписаниеПеременных

Перем СхемаКомпоновкиДанных Экспорт;
Перем НастройкиКомпоновкиДанных Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем КомпоновщикМакета Экспорт;
Перем МакетКомпоновкиДанных Экспорт;
Перем МенеджерВременныхТаблиц Экспорт;
Перем ВнешниеНаборыДанных Экспорт;

Перем СтруктураМакета Экспорт;
Перем ГруппировкиМакета Экспорт;
Перем ТипГенератора;
Перем ТипыГенераторов;

#КонецОбласти

Функция Схема(_Схема) Экспорт
	СхемаКомпоновкиДанных = _Схема;
	Возврат ЭтотОбъект;
КонецФункции

Функция Настройки(Настройки) Экспорт
	НастройкиКомпоновкиДанных = Настройки;
	Возврат ЭтотОбъект;
КонецФункции

Функция МенеджерВременныхТаблиц(_МенеджерВременныхТаблиц) Экспорт
	МенеджерВременныхТаблиц = _МенеджерВременныхТаблиц;
	Возврат ЭтотОбъект;
КонецФункции

Функция ВнешниеНаборыДанных(_ВнешниеНаборыДанных) Экспорт
	ВнешниеНаборыДанных = _ВнешниеНаборыДанных;
	Возврат ЭтотОбъект;
КонецФункции

Функция НаборДанных(Данные, Имя = "НаборДанных") Экспорт
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ВнешниеНаборыДанных = Данные;
		Возврат ЭтотОбъект;
	КонецЕсли;
	ВнешниеНаборыДанных.Вставить(Имя, Данные);
	Возврат ЭтотОбъект;
КонецФункции

// ТипГенератора = "ТабличныйДокумент", "ДеревоЗначений", "ТаблицаЗначений"
Функция Скомпоновать(Расшифровка = Неопределено, Генератор = "ТабличныйДокумент") Экспорт
	ТипГенератора = ТипыГенераторов[Генератор];
	ГруппировкиМакета = Новый Массив;
	СтруктураМакета = Новый Массив;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	Если ТипГенератора = ТипыГенераторов.ТабличныйДокумент Тогда
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	Иначе
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КонецЕсли;
	Расшифровка = ДанныеРасшифровки;
	Возврат ЭтотОбъект;
КонецФункции

Функция СкомпоноватьДеревоЗначений(Расшифровка = Неопределено) Экспорт
	Возврат Скомпоновать(Расшифровка, "ДеревоЗначений");
КонецФункции

Функция СкомпоноватьТаблицуЗначений(Расшифровка = Неопределено) Экспорт
	Возврат Скомпоновать(Расшифровка, "ТаблицаЗначений");
КонецФункции

Функция ВывестиВТабличныйДокумент(Результат = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Результат = Новый ТабличныйДокумент;
	КонецЕсли;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, ДанныеРасшифровки, , , МенеджерВременныхТаблиц);
	//  Вывод результата в отчет
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат Результат;
КонецФункции

Функция ВывестиВКоллекциюЗначений(Коллекция) Экспорт
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, ДанныеРасшифровки, , , МенеджерВременныхТаблиц);
	//  Вывод результата в дерево значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Коллекция);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат Коллекция;
КонецФункции

Функция Вывести(ТабличныйДокумент = Неопределено) Экспорт
	Если ТипГенератора = ТипыГенераторов.ТабличныйДокумент Тогда
		Возврат ВывестиВТабличныйДокумент(ТабличныйДокумент);
	ИначеЕсли ТипГенератора = ТипыГенераторов.ДеревоЗначений Тогда
		Возврат ВывестиВКоллекциюЗначений(Новый ДеревоЗначений);
	ИначеЕсли ТипГенератора = ТипыГенераторов.ТаблицаЗначений Тогда
		Возврат ВывестиВКоллекциюЗначений(Новый ТаблицаЗначений);
	Иначе
		ВызватьИсключение "Неизвестный тип генератора компоновки: " + ТипГенератора;
	КонецЕсли;
КонецФункции

Функция ИдентификаторТаблицы(ИдентификаторТаблицы = "") Экспорт
	Для Каждого ОписаниеМакета Из МакетКомпоновкиДанных.Макеты Цикл
		Макет = ОписаниеМакета.Макет;
		Если ТипЗнч(Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицыОбласти Из Макет Цикл
			СтрокаТаблицыОбласти.ИдентификаторТаблицы = ИдентификаторТаблицы;
		КонецЦикла;
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

Процедура ЗаполнитьСтруктуруМакета(ЭлементыМакета, ЭлементМакета, МакетКомпоновкиДанных)
	ТипЭлемента = ТипЗнч(ЭлементМакета);
	
	Если ТипЭлемента = Тип("ВложенныйОбъектМакетаКомпоновкиДанных") Тогда
		ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
		ОписаниеЭлементаМакета.Тип = "ВложенныйОбъектМакетаКомпоновкиДанных";
		ЗаполнитьЗначенияСвойств(ОписаниеЭлементаМакета, ЭлементМакета);
		ПодчиненныеЭлементы = Новый Массив;
		ЗаполнитьСтруктуруМакета(ПодчиненныеЭлементы, ЭлементМакета.КомпоновкаДанных, ЭлементМакета.КомпоновкаДанных);
		ОписаниеЭлементаМакета.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
//		Для Каждого ОписаниеМакета Из ЭлементМакета.КомпоновкаДанных.Макеты Цикл
//			Макет = ОписаниеМакета.Макет;
//			Если ТипЗнч(Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
//				Продолжить;
//			КонецЕсли;
//			Макет[0].ИдентификаторТаблицы = ИдентификаторТаблицы;
//		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементМакета Из ЭлементМакета.Тело Цикл
		ТипПодчиненногоЭлемента = ТипЗнч(ПодчиненныйЭлементМакета);
		Если ТипПодчиненногоЭлемента = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
			ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
			ОписаниеЭлементаМакета.Тип = "МакетОбластиМакетаКомпоновкиДанных";
			ОписаниеЭлементаМакета.Макет = ПодчиненныйЭлементМакета.Макет;
			Если ЗначениеЗаполнено(ПодчиненныйЭлементМакета.Макет) Тогда
				ОписаниеМакета = МакетКомпоновкиДанных.Макеты.Найти(ПодчиненныйЭлементМакета.Макет);
				Параметры = РаботаСМассивом.АТДМассив(ОписаниеМакета.Параметры)
					.Отобрать("ТипЗнч(Элемент) = Тип('ПараметрОбластиВыражениеКомпоновкиДанных')")
					.Отобразить("Новый Структура('Выражение, Имя', Элемент.Выражение, Элемент.Имя)")
					.ВМассив()
				;
				ПараметрыРасшифровки = РаботаСМассивом.АТДМассив(ОписаниеМакета.Параметры)
					.Отобрать("ТипЗнч(Элемент) = Тип('ПараметрОбластиРасшифровкаКомпоновкиДанных')")
					.Отобразить("Новый Структура('ВыраженияПолей, Имя', Элемент.ВыраженияПолей, Элемент.Имя)")
					.ВМассив()
				;
				Для Каждого Элемент Из ПараметрыРасшифровки ЦИкл
					Элемент.ВыраженияПолей = РаботаСМассивом.АТДМассив(Элемент.ВыраженияПолей)
						.Отобразить("Новый Структура('Поле, Выражение', Элемент.Поле, Элемент.Выражение)")
						.ВМассив()
					;
				КонецЦикла;
				ОписаниеЭлементаМакета.Параметры = Параметры;
				ОписаниеЭлементаМакета.ПараметрыРасшифровки = ПараметрыРасшифровки;
			КонецЕсли;
			ЭлементыМакета.Добавить(ОписаниеЭлементаМакета);
			Продолжить;
		КонецЕсли;
		
		Если ТипПодчиненногоЭлемента = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			ПоляГруппировки = РаботаСМассивом.АТДМассив(ПодчиненныйЭлементМакета.Группировка)
				.Отобразить("Элемент.ИмяПоля")
				.ВМассив()
			;
			ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
			ОписаниеЭлементаМакета.Тип = Строка(ТипПодчиненногоЭлемента);
			ЗаполнитьЗначенияСвойств(ОписаниеЭлементаМакета, ПодчиненныйЭлементМакета);
			ОписаниеЭлементаМакета.ПоляГруппировки = ПоляГруппировки;
			ГруппировкиМакета.Добавить(Новый Структура("Имя, Макет", ОписаниеЭлементаМакета.Имя, ОписаниеЭлементаМакета));
			ПодчиненныеЭлементы = Новый Массив;
			ЗаполнитьСтруктуруМакета(ПодчиненныеЭлементы, ПодчиненныйЭлементМакета, МакетКомпоновкиДанных);
			ОписаниеЭлементаМакета.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
			Если ЗначениеЗаполнено(ПодчиненныйЭлементМакета.МакетПодвала) Тогда
				ОписаниеМакета = МакетКомпоновкиДанных.Макеты.Найти(ПодчиненныйЭлементМакета.МакетПодвала);
				Параметры = РаботаСМассивом.АТДМассив(ОписаниеМакета.Параметры)
					.Отобрать("ТипЗнч(Элемент) = Тип('ПараметрОбластиВыражениеКомпоновкиДанных')")
					.Отобразить("Новый Структура('Выражение, Имя', Элемент.Выражение, Элемент.Имя)")
					.ВМассив()
				;
				ПараметрыРасшифровки = РаботаСМассивом.АТДМассив(ОписаниеМакета.Параметры)
					.Отобрать("ТипЗнч(Элемент) = Тип('ПараметрОбластиРасшифровкаКомпоновкиДанных')")
					.Отобразить("Новый Структура('ВыраженияПолей, Имя', Элемент.ВыраженияПолей, Элемент.Имя)")
					.ВМассив()
				;
				Для Каждого Элемент Из ПараметрыРасшифровки ЦИкл
					Элемент.ВыраженияПолей = РаботаСМассивом.АТДМассив(Элемент.ВыраженияПолей)
						.Отобразить("Новый Структура('Поле, Выражение', Элемент.Поле, Элемент.Выражение)")
						.ВМассив()
					;
				КонецЦикла;
				ОписаниеЭлементаМакета.Параметры = Параметры;
				ОписаниеЭлементаМакета.ПараметрыРасшифровки = ПараметрыРасшифровки;
			КонецЕсли;
			ЭлементыМакета.Добавить(ОписаниеЭлементаМакета);
			Продолжить;
		КонецЕсли;
		
		Если ТипПодчиненногоЭлемента = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
			ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
			ОписаниеЭлементаМакета.Тип = Строка(ТипПодчиненногоЭлемента);
			ОписаниеЭлементаМакета.Макет = ПодчиненныйЭлементМакета.Макет;
			ЭлементыМакета.Добавить(ОписаниеЭлементаМакета);
			Продолжить;
		КонецЕсли;
		
		Если ТипПодчиненногоЭлемента = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
			ОписаниеЭлементаМакета.Тип = Строка(ТипПодчиненногоЭлемента);
			ЗаполнитьЗначенияСвойств(ОписаниеЭлементаМакета, ПодчиненныйЭлементМакета);
			Колонки = Новый Массив;
			Для Каждого ЭлементМакетаКолонки Из ПодчиненныйЭлементМакета.Колонки Цикл
				ТипПодчиненногоЭлемента = ТипЗнч(ЭлементМакетаКолонки);
	
				ПоляГруппировки = РаботаСМассивом.АТДМассив(ЭлементМакетаКолонки.Группировка)
					.Отобразить("Элемент.ИмяПоля")
					.ВМассив()
				;
				ОписаниеПодчиненногоЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
				ОписаниеПодчиненногоЭлементаМакета.Тип = Строка(ТипПодчиненногоЭлемента);
				ЗаполнитьЗначенияСвойств(ОписаниеПодчиненногоЭлементаМакета, ЭлементМакетаКолонки, "Имя, Идентификатор");
				ОписаниеПодчиненногоЭлементаМакета.ПоляГруппировки = ПоляГруппировки;
				ОписаниеПодчиненногоЭлементаМакета.МакетШапки = ЭлементМакетаКолонки.МакетШапки.Макет;
				ОписаниеПодчиненногоЭлементаМакета.МакетПодвала = ЭлементМакетаКолонки.МакетПодвала.Макет;
				
				ПодчиненныеЭлементы = Новый Массив;
				ЗаполнитьСтруктуруМакета(ПодчиненныеЭлементы, ЭлементМакетаКолонки, МакетКомпоновкиДанных);
				ОписаниеПодчиненногоЭлементаМакета.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
				
				Колонки.Добавить(ОписаниеПодчиненногоЭлементаМакета);
			КонецЦикла;
			
			Строки = Новый Массив;
			Для Каждого ЭлементМакетаСтроки Из ПодчиненныйЭлементМакета.Колонки Цикл
				ТипПодчиненногоЭлемента = ТипЗнч(ЭлементМакетаСтроки);
	
				ПоляГруппировки = РаботаСМассивом.АТДМассив(ЭлементМакетаСтроки.Группировка)
					.Отобразить("Элемент.ИмяПоля")
					.ВМассив()
				;
				ОписаниеПодчиненногоЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
				ОписаниеПодчиненногоЭлементаМакета.Тип = Строка(ТипПодчиненногоЭлемента);
				ЗаполнитьЗначенияСвойств(ОписаниеПодчиненногоЭлементаМакета, ЭлементМакетаСтроки, "Имя, Идентификатор");
				ОписаниеПодчиненногоЭлементаМакета.ПоляГруппировки = ПоляГруппировки;
				ОписаниеПодчиненногоЭлементаМакета.МакетШапки = ЭлементМакетаСтроки.МакетШапки.Макет;
				ОписаниеПодчиненногоЭлементаМакета.МакетПодвала = ЭлементМакетаСтроки.МакетПодвала.Макет;
				
				ПодчиненныеЭлементы = Новый Массив;
				ЗаполнитьСтруктуруМакета(ПодчиненныеЭлементы, ЭлементМакетаСтроки, МакетКомпоновкиДанных);
				ОписаниеПодчиненногоЭлементаМакета.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
				
				Строки.Добавить(ОписаниеПодчиненногоЭлементаМакета);
			КонецЦикла;
			
			ОписаниеЭлементаМакета.Вставить("Колонки", Колонки);
			ОписаниеЭлементаМакета.Вставить("Строки", Строки);
			
			ЭлементыМакета.Добавить(ОписаниеЭлементаМакета);
			Возврат;
		КонецЕсли;
		
		ОписаниеЭлементаМакета = Новый Структура("Тип, Имя, Идентификатор, МакетШапки, МакетПодвала, ПоляГруппировки, Макет, ПодчиненныеЭлементы, Параметры, ПараметрыРасшифровки");
		ОписаниеЭлементаМакета.Тип = Строка(ТипЭлемента);
		ЗаполнитьЗначенияСвойств(ОписаниеЭлементаМакета, ПодчиненныйЭлементМакета);
		ПодчиненныеЭлементы = Новый Массив;
		ЗаполнитьСтруктуруМакета(ПодчиненныеЭлементы, ПодчиненныйЭлементМакета, МакетКомпоновкиДанных);
		ОписаниеЭлементаМакета.ПодчиненныеЭлементы = ПодчиненныеЭлементы;
		ЭлементыМакета.Добавить(ОписаниеЭлементаМакета);
	КонецЦикла;
КонецПроцедуры

Функция СтруктураМакета() Экспорт
	Если ЗначениеЗаполнено(СтруктураМакета) Тогда
		Возврат СтруктураМакета;
	КонецЕсли;
	ГруппировкиМакета = Новый Массив;
	СтруктураМакета = Новый Массив;
	ЗаполнитьСтруктуруМакета(СтруктураМакета, МакетКомпоновкиДанных, МакетКомпоновкиДанных);
	Возврат СтруктураМакета;
КонецФункции

Функция ГруппировкиМакета() Экспорт
	Если ЗначениеЗаполнено(СтруктураМакета) Тогда
		Возврат ГруппировкиМакета;
	КонецЕсли;
	ГруппировкиМакета = Новый Массив;
	СтруктураМакета = Новый Массив;
	ЗаполнитьСтруктуруМакета(СтруктураМакета, МакетКомпоновкиДанных, МакетКомпоновкиДанных);
	Возврат ГруппировкиМакета;
КонецФункции

ТипыГенераторов = Новый Структура("ТабличныйДокумент, ДеревоЗначений, ТаблицаЗначений", 1, 2, 3);
ВнешниеНаборыДанных = Новый Структура;