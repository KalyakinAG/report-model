//  Подсистема "Модель отчета"
//	Автор: Калякин Андрей Г.
//  https://github.com/KalyakinAG/kassl
//  https://github.com/KalyakinAG/report-model

//@skip-check object-module-export-variable
//@skip-check module-accessibility-at-client

#Область ОписаниеПеременных

Перем СхемаКомпоновкиДанных Экспорт;
Перем НаборДанных;
Перем ПолеНабораДанных;
Перем ПолеРесурса;
Перем ВычисляемоеПоле;
Перем ПараметрСхемы;
Перем Раздел;
Перем Разделы;
Перем НомерПериода;
Перем Роль;
Перем ВнешниеНаборыДанных Экспорт;
Перем НаборыДанных Экспорт;
Перем КолонкиНабораДанных;
Перем Соединение;
Перем ВариантНастроек;

Перем Настройки;
Перем ВыбранноеПоле;
Перем ГруппаВыбранныхПолей;
Перем ГруппаОтбора;
Перем ЭлементОтбора;
Перем Группировка;
Перем ПолеГруппировки;
Перем Таблица;
Перем ЭлементУсловногоОформления;
Перем ОформляемоеПоле;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция НаборДанныхЗапрос(ТекстЗапроса, ИмяНабораДанных = "НаборДанных") Экспорт
	НомерПериода = 0;
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИспользоватьГруппировкиЗапросаЕслиВозможно = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	Возврат ЭтотОбъект;
КонецФункции

Функция НаборДанныхОбъект(Данные, ИмяНабораДанных = "НаборДанных", ИмяОбъекта = Неопределено) Экспорт
	КолонкиНабораДанных = Данные.Колонки;
	Если НЕ ЗначениеЗаполнено(ИмяОбъекта) Тогда
		ИмяОбъекта = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	КонецЕсли;
	ВнешниеНаборыДанных.Вставить(ИмяОбъекта, Данные);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.ИмяОбъекта = ИмяОбъекта;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	Возврат ЭтотОбъект;
КонецФункции

Функция ВнутреннееСоединение(НаборДанныхИсточник, НаборДанныхПриемник, Связь = Неопределено) Экспорт
	Соединение = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Соединение.Обязательная = Истина;
	Соединение.НаборДанныхИсточник = НаборДанныхИсточник;
	Соединение.НаборДанныхПриемник = НаборДанныхПриемник;
	
	Если ЗначениеЗаполнено(Связь) Тогда
		Связь(Связь);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЛевоеСоединение(НаборДанныхИсточник, НаборДанныхПриемник) Экспорт
	Соединение = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Соединение.НаборДанныхИсточник = НаборДанныхИсточник;
	Соединение.НаборДанныхПриемник = НаборДанныхПриемник;
	Возврат ЭтотОбъект;
КонецФункции

Функция Связь(СоответствиеПолей) Экспорт
	ЭтоПервое = Истина;
	Для Каждого Выражение Из ОбщийКлиентСервер.Массив(СоответствиеПолей) Цикл
		Если НЕ ЭтоПервое Тогда
			Соединение1 = Соединение;
			Соединение = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			ЗаполнитьЗначенияСвойств(Соединение, Соединение1);
		КонецЕсли;
		ЭтоПервое = Ложь;
		Состав = СтрРазделить(Выражение, "= ", Ложь);
		Если Состав.Количество() = 1 Тогда
			Поле = Состав[0];
			Соединение.ВыражениеИсточник = Поле;
			Соединение.ВыражениеПриемник = Поле;
			Продолжить;
		КонецЕсли;
		Соединение.ВыражениеИсточник = Состав[0];
		Соединение.ВыражениеПриемник = Состав[1];
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

Функция УсловиеСвязи(ВыражениеУсловия) Экспорт
	Соединение.УсловиеСвязи = ВыражениеУсловия;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПараметрСвязи(Параметр) Экспорт
	Соединение.Параметр = Параметр;
	Возврат ЭтотОбъект;
КонецФункции

Функция НачальноеВыражение(НачальноеВыражениеСвязи) Экспорт
	Соединение.НачальноеВыражение = НачальноеВыражениеСвязи;
	Возврат ЭтотОбъект;
КонецФункции

Функция Счет(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", ВыражениеВидаСчета = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыражениеВидаСчета) Тогда
		ВыражениеВидаСчета = ИмяПоля + "." + "Вид";
	КонецЕсли;
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	ПолеНабораДанных.Заголовок = Заголовок;
	Роль = ПолеНабораДанных.Роль;
	Если Раздел = Разделы.Измерения Тогда
		ПолеНабораДанных.Роль.Измерение = Истина;
	КонецЕсли;
	Роль.ВыражениеВидаСчета = ВыражениеВидаСчета;
	Если КолонкиНабораДанных <> Неопределено Тогда
		ПолеНабораДанных.ТипЗначения = КолонкиНабораДанных[ИмяПоля].ТипЗначения;		
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Поле(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Выражение = "", Группировки = Неопределено) Экспорт
	Если Настройки <> Неопределено Тогда
		ПолеНастройки(ИмяПоля, Заголовок);
		Возврат ЭтотОбъект;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = ИмяПоля;
	ПолеНабораДанных.Заголовок = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Роль = ПолеНабораДанных.Роль;
	Если Раздел = Разделы.Измерения Тогда
		ПолеНабораДанных.Роль.Измерение = Истина;
	ИначеЕсли Раздел = Разделы.Ресурсы Тогда
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		ПолеРесурса.Выражение = Выражение;
		Если ЗначениеЗаполнено(Группировки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолеРесурса.Группировки, ОбщийКлиентСервер.Массив(Группировки));
		КонецЕсли;
	КонецЕсли;
	Если КолонкиНабораДанных <> Неопределено Тогда
		ПолеНабораДанных.ТипЗначения = КолонкиНабораДанных[ИмяПоля].ТипЗначения;		
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

//Для оформления используются следующие элементы оформления:
//ЦветФона (BackColor) - тип значения Цвет;
//ЦветТекста (TextColor) - тип значения Цвет;
//ЦветГраницы (BorderColor) - тип значения Цвет;
//СтильГраницы (BorderStyle) - тип значения Линия;
//СтильГраницы.Слева (BorderStyle.Left) - тип значения Линия;
//СтильГраницы.Сверху (BorderStyle.Top) - тип значения Линия;
//СтильГраницы.Справа (BorderStyle.Right) - тип значения Линия;
//СтильГраницы.Снизу (BorderStyle.Bottom) - тип значения Линия;
//Шрифт (Font) - тип значения Шрифт;
//Отступ (Indent) - тип значения Число;
//АвтоОтступ (AutoIndent) - тип значения Число;
//ГоризонтальноеПоложение (HorizontalAlign) - тип значения ГоризонтальноеПоложение;
//ВертикальноеПоложение (VerticalAlign) - тип значения ВертикальноеПоложение;
//Размещение (Placement) - размещение текста - тип значения ТипРазмещенияТекстаКомпоновкиДанных;
//ОриентацияТекста (TextOrientation) - тип значения Число;
//Формат (Format) - тип значения Строка (форматная строка);
//ВыделятьОтрицательные (MarkNegatives) - тип значения Булево;
//МинимальнаяШирина (MinWidth) - тип значения Число;
//МаксимальнаяШирина (MaxWidth) - тип значения Число;
//МинимальнаяВысота (MinHeight) - тип значения Число;
//МаксимальнаяВысота (MaxHeight) - тип значения Число;
//Текст (Text) - тип значения Строка;
//ОтметкаНезаполненного (MarkIncomplete) - отмечать ячейку как незаполненную - тип значения Булево;
//Видимость (Visible) - Булево. Используется только для поля, расположенного в таблице (колонки);
//Доступность (Enabled) - Булево. Используется только для поля, расположенного в таблице (колонки);
//ТолькоПросмотр (ReadOnly) - Булево. Используется только для поля, расположенного в таблице (колонки);
//Отображать (Show) - Булево. Используется только для поля, расположенного в таблице (колонки);
//ЦветВДиаграмме (ColorInChart) - тип значения Цвет. Используется только для серии диаграммы;
//ОтображатьГрафическоеПредставлениеДанныхВДиаграмме (ShowGraphicalRepresentationOfDataOnChart) тип значения ОтображениеВДиаграмме. Используется только для серий диаграммы;
//ОтображатьГрафическоеПредставлениеДанныхВЛегендеДиаграммы (ShowGraphicalRepresentationOfDataInChartLegend) - тип значения ОтображениеВЛегендеДиаграммы. Используется только для серий диаграммы;
//ЛинииТрендаВДиаграмме (ChartTrendlines) - тип значения ЛинииТрендаДиаграммы. Используется только для серий диаграммы;
//ЛинияВДиаграмме (LineInChart) - тип значения Линия. Тип линии серии, полученной из данной группировки. Используется только для серий диаграммы;
//МаркерВДиаграмме (MarkerInChart) - тип значения ТипМаркераДиаграммы. Тип маркера серии, полученной из данной группировки. Используется только для серий диаграммы;
//ИндикаторВДиаграмме (IndicatorInChart) - тип значения Булево. Указывает, что серия, полученная из данной группировки является индикатором. Используется только для серий диаграммы;
//РастягиватьПоГоризонтали (HorizontalStretch) - тип значения Булево. Указывает, что ширина текущей колонки рассчитывается автоматически;
//ВесовойКоэффициентШирины (WidthWeightFactor) - тип значения Число. Весовой коэффициент для автоматического расчета ширины колонки;
//ИнформационнаяЛинияВДиаграмме (ReferenceLineInChart) - тип значения ИнформационнаяЛинияДиаграммы. Информационная линия в диаграмме;
//ИнформационныйИнтервалВДиаграмме (ReferenceBandInChart) - тип значения ИнформационныйИнтервалДиаграммы. Информационный интервал в диаграмме;
//ВыводитьКартинку (PictureOutput) - тип значения ТипВыводаКартинкиКомпоновкиДанных. Способ вывода картинки;
//РазмерКартинки (PictureSize) - тип значения ПоложениеТекстаОтносительноКартинки. Положение текста относительно картинки;
//ПоложениеТекстаОтносительноКартинки (TextPositionRelativeToPicture) - тип значения ПоложениеТекстаОтносительноКартинки. Положение текста относительно картинки;
//ГоризонтальноеПоложениеКартинки (PictureHorizontalAlign) - тип значения ГоризонтальноеПоложение. Размещение картинки по горизонтали;
//ВертикальноеПоложениеКартинки (PictureVerticalAlign) - тип значения ВертикальноеПоложение. Размещение картинки по вертикали;
//ТипГрафическогоПредставленияВДиаграмме (VisualTypeInChart) - тип значения ТипГрафическогоПредставленияСерииДиаграммы.Тип графического представления серии в диаграмме;
//ТипНакопленияВДиаграмме (StackTypeInChart) - тип значения ТипНакопленияСерииДиаграммы. Тип накопления серии, отличный от типа диаграммы. Группа накопления серии создаётся автоматически, на основе элемента условного оформления. Разные элементы условного оформления будут имеют разные группы накопления;
//ИспользуемаяОсьЗначенийВДиаграмме (UsedValueAxisInChart) - тип значения ИспользуемаяОсьЗначенийДиаграммы Настраивает использование дополнительной оси значений в диаграмме;
//Картинка (Picture) - тип значения Картинка;
//РазделительМножественныхЗначений (MultipleValuesSeparator) - тип значения Строка. Содержит разделитель, который вставляется между значениями множественных характеристик. Если параметр не задан, то используется запятая с пробелом;
//ОтступСлева (LeftMargin) - тип значения Число;
//ОтступСправа (RightMargin) - тип значения Число;
//ОтступСверху (TopMargin) - тип значения Число;
//ОтступСнизу (BottomMargin) - тип значения Число.
Функция Оформление(ИмяПараметра, ЗначениеПараметра) Экспорт
	Если ЭлементУсловногоОформления <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	ИначеЕсли ПолеНабораДанных <> Неопределено Тогда
		ПолеНабораДанных.Оформление.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	Иначе
		ВызватьИсключение "Неопределен элемент оформления!";
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция ТипЗначения(Тип) Экспорт
	ПолеНабораДанных.ТипЗначения = Тип;
	Возврат ЭтотОбъект;
КонецФункции

//  Группировки
//  Массив, содержащий имена полей, для которых данное поле будет вычисляться в итогах. Через пробел после имени поля возможно указание ключевого слова Иерархия. Добавление данного ключевого слова обозначает, что выражение будет использоваться для иерархических записей группировки по полю, указанному перед словом, и всех вложенных группировок, для которых не задано собственное выражение данного ресурса. В случае, если массив пуст, итог будет вычисляться для всех полей. Может содержать строку ОбщийИтог для указания необходимости вычисления в общем итоге. 
Функция ВычисляемоеПоле(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Выражение, ВыражениеИтога = Неопределено, Группировки = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
	ВычисляемоеПоле.Выражение = Выражение;
	ВычисляемоеПоле.Заголовок = Заголовок;
	Если Раздел = Разделы.Ресурсы Тогда
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		ПолеРесурса.Выражение = ?(ЗначениеЗаполнено(ВыражениеИтога), ВыражениеИтога, СтрШаблон("СУММА(%1)", ИмяПоля));
		Если ЗначениеЗаполнено(Группировки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолеРесурса.Группировки, Группировки);
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Обязательное() Экспорт
	Роль.Обязательное = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция Сумма(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("СУММА(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция Максимум(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("МАКСИМУМ(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция Минимум(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("МИНИМУМ(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция Среднее(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("СРЕДНЕЕ(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция Количество(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("КОЛИЧЕСТВО(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция КоличествоРазличных(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Группировки = Неопределено) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным, СтрШаблон("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)), Группировки);
	Возврат ЭтотОбъект;
КонецФункции

Функция НачальныйОстаток(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", ИмяРесурса, ТипОстаткаДбКт = "Нет", ПолеСчета = "") Экспорт
	Если Раздел <> Разделы.Ресурсы Тогда
		ВызватьИсключение "Ресурсы указываются в разделе Ресурсов";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяРесурса) Тогда
		ВызватьИсключение "Для остатка необходимо определить имя ресурса";
	КонецЕсли;
	Сумма(ИмяПоля, Заголовок, ПутьКДанным);
	Роль.Остаток = Истина;
	Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
	Роль.ГруппаОстатка = ИмяРесурса;
	Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных[ТипОстаткаДбКт];
	Роль.ПолеСчета = ПолеСчета;
	Возврат ЭтотОбъект;
КонецФункции

Функция КонечныйОстаток(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", ИмяРесурса, ТипОстаткаДбКт = "Нет", ПолеСчета = "") Экспорт
	Если Раздел <> Разделы.Ресурсы Тогда
		ВызватьИсключение "Ресурсы указываются в разделе Ресурсов";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяРесурса) Тогда
		ВызватьИсключение "Для остатка необходимо определить имя ресурса";
	КонецЕсли;
	Сумма(ИмяПоля, Заголовок, ПутьКДанным);
	Роль.Остаток = Истина;
	Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
	Роль.ГруппаОстатка = ИмяРесурса;
	Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных[ТипОстаткаДбКт];
	Роль.ПолеСчета = ПолеСчета;
	Возврат ЭтотОбъект;
КонецФункции

// Период.
// 
// Параметры:
//  ИмяПоля - Строка - Имя поля
//  ПутьКДанным - Строка -  Путь к данным
//  Дополнительный - Булево -  данный период не определяет порядок для дочернего периода. Например
//   для секунды период день не является необходимым для порядка. Для Регистратора наоборот родительский период Секунда
//   определяет порядок
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельСхемыКомпоновкиДанных -  Период
Функция Период(ИмяПоля, Знач Заголовок = "", Знач ПутьКДанным = "", Дополнительный = Ложь) Экспорт
	Поле(ИмяПоля, Заголовок, ПутьКДанным);
	НомерПериода = НомерПериода + 1;
	ПолеНабораДанных.Роль.НомерПериода = НомерПериода;
	ПолеНабораДанных.Роль.ТипПериода = ?(Дополнительный, ТипПериодаКомпоновкиДанных.Дополнительный, ТипПериодаКомпоновкиДанных.Основной);
	Возврат ЭтотОбъект;
КонецФункции

//  ПараметрСхемыКомпоновкиДанных
Функция Параметр(Имя, Значение = null, ТипЗначения = null, Выражение = null) Экспорт
	Если Настройки <> Неопределено Тогда
		Если Значение = null Тогда
			ВызватьИсключение "Не задано значение параметра настройки " + Имя;
		КонецЕсли;
		ПараметрНастройки(Имя, Значение);
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = Имя;
	Если ТипЗначения <> null Тогда
		ПараметрСхемы.ТипЗначения = ТипЗначения;	
	КонецЕсли;
	Если Значение <> null Тогда
		ПараметрСхемы.Значение = Значение;
	КонецЕсли;
	Если Выражение <> null Тогда
		ПараметрСхемы.Выражение = Значение;
	КонецЕсли;
	ПараметрСхемы.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	Возврат ЭтотОбъект;
КонецФункции

Функция Выражение(Выражение) Экспорт
	Если Раздел = Разделы.Параметры Тогда
		ПараметрСхемы.Выражение = Выражение;
		Возврат ЭтотОбъект;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Измерения() Экспорт
	Раздел = Разделы.Измерения;
	Возврат ЭтотОбъект;
КонецФункции

Функция Реквизиты() Экспорт
	Раздел = Разделы.Реквизиты;
	Возврат ЭтотОбъект;
КонецФункции

Функция Ресурсы() Экспорт
	Раздел = Разделы.Ресурсы;
	Возврат ЭтотОбъект;
КонецФункции

Функция Условия() Экспорт
	Раздел = Разделы.Условия;
	Возврат ЭтотОбъект;
КонецФункции

Функция УсловноеОформление() Экспорт
	Раздел = Разделы.УсловноеОформление;
	Возврат ЭтотОбъект;
КонецФункции

Функция ВариантНастроек(Имя, Представление = "") Экспорт
	ВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Добавить();
	ВариантНастроек.Имя = Имя;
	ВариантНастроек.Представление = Представление;
	Настройки = ВариантНастроек.Настройки;
	Возврат ЭтотОбъект;
КонецФункции

Функция Параметры() Экспорт
	Раздел = Разделы.Параметры;
	Возврат ЭтотОбъект;
КонецФункции

#Область ВариантыНастроек

Функция НастройкиПоУмолчанию() Экспорт
	Возврат СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
КонецФункции

Функция ЭлементОформления() Экспорт
	ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	Возврат ЭтотОбъект;
КонецФункции

Функция ОформляемоеПоле(ИмяПоля)
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ОформляемоеПоле.Использование = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция Выбор() Экспорт
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолеНастройки(ИмяПоля, Заголовок = "") Экспорт
	Если Раздел = Разделы.УсловноеОформление Тогда
		Возврат ОформляемоеПоле(ИмяПоля);
	КонецЕсли;
	ЭтоАвтоПоле = ПустаяСтрока(ИмяПоля) ИЛИ ИмяПоля = "*";
	Если ЭтоАвтоПоле Тогда
		ТипПоля = Тип("АвтоВыбранноеПолеКомпоновкиДанных");
	Иначе
		ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных");
	КонецЕсли;
	Если ГруппаВыбранныхПолей = Неопределено Тогда
		Если Группировка = Неопределено Тогда
			ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(ТипПоля);
		Иначе
			ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(ТипПоля);
		КонецЕсли;
	Иначе
		ВыбранноеПоле = ГруппаВыбранныхПолей.Элементы.Добавить(ТипПоля);
	КонецЕсли;
	ВыбранноеПоле.Использование = Истина;
	Если ЭтоАвтоПоле Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция ГруппаНачать(Заголовок, Расположение = Неопределено) Экспорт
	Если ГруппаВыбранныхПолей = Неопределено Тогда
		Если Группировка = Неопределено Тогда
			ГруппаВыбранныхПолей = Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Иначе
			ГруппаВыбранныхПолей = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		КонецЕсли;
	Иначе
		ГруппаВыбранныхПолей = ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	КонецЕсли;
	ГруппаВыбранныхПолей.Использование = Истина;
	ГруппаВыбранныхПолей.Расположение = ?(Расположение = Неопределено, РасположениеПоляКомпоновкиДанных.Авто, Расположение);
	ГруппаВыбранныхПолей.Заголовок = Заголовок;
	Возврат ЭтотОбъект;
КонецФункции

Функция ГруппаЗавершить() Экспорт
	ГруппаВыбранныхПолей = ГруппаВыбранныхПолей.Родитель;
	Возврат ЭтотОбъект;
КонецФункции

Функция ОтборГруппаНачать(ТипГруппы) Экспорт
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	КонецЕсли;
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппы;
	Возврат ЭтотОбъект;
КонецФункции

Функция ОтборГруппаИНачать() Экспорт
	ОтборГруппаНачать(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	Возврат ЭтотОбъект;
КонецФункции

Функция ОтборГруппаИЛИНачать() Экспорт
	ОтборГруппаНачать(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	Возврат ЭтотОбъект;
КонецФункции

Функция ОтборГруппаНЕНачать() Экспорт
	ОтборГруппаНачать(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	Возврат ЭтотОбъект;
КонецФункции

Функция ОтборГруппаЗавершить() Экспорт
	ГруппаОтбора = ГруппаОтбора.Родитель;
	Возврат ЭтотОбъект;
КонецФункции

Функция Отбор(ИмяПоля, Значение, ВидСравнения = Неопределено) Экспорт
	Если ГруппаОтбора = Неопределено Тогда
		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = ?(ТипЗнч(ИмяПоля) = Тип("Строка"), Новый ПолеКомпоновкиДанных(ИмяПоля), ИмяПоля);
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.ВидСравнения = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	Возврат ЭтотОбъект;
КонецФункции

Функция Порядок(ИмяПоля, ТипУпорядочивания = Неопределено) Экспорт
	ЭлементПорядка = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если ТипЗнч(ТипУпорядочивания) = Тип("Строка") Тогда
		Если ТипУпорядочивания = "-" Тогда
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	Иначе
		ЭлементПорядка.ТипУпорядочивания = ?(ТипУпорядочивания = Неопределено, НаправлениеСортировкиКомпоновкиДанных.Возр, ТипУпорядочивания);
	КонецЕсли;
	ЭлементПорядка.Использование = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ГруппировкаНачать(ИмяГруппировки = Неопределено) Экспорт
	Если Группировка = Неопределено Тогда
		Группировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ИначеЕсли ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Группировка = Группировка.Структура.Добавить();
	Иначе
		Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	Группировка.Использование = Истина;
	Если ИмяГруппировки <> Неопределено Тогда
		Группировка.Имя = ИмяГруппировки;
	КонецЕсли;
//	ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
//	ВыбранноеПоле.Использование = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолеГруппировки(ПутьКДанным) Экспорт
	Если ПутьКДанным = "*" Тогда
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = ?(ТипЗнч(ПутьКДанным) = Тип("Строка"), Новый ПолеКомпоновкиДанных(ПутьКДанным), ПутьКДанным);
	Возврат ЭтотОбъект;
КонецФункции

Функция ГруппировкаЗавершить() Экспорт
	Группировка = Группировка.Родитель;
	Возврат ЭтотОбъект;
КонецФункции

Функция ТаблицаНачать() Экспорт
	Если Группировка = Неопределено Тогда
		Таблица = Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	Иначе
		Таблица = Группировка.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция ТаблицаЗавершить() Экспорт
	Группировка = Таблица.Родитель;
	Таблица = Неопределено;
	Возврат ЭтотОбъект;
КонецФункции

Функция Строки() Экспорт
	Группировка = Таблица.Строки.Добавить();
	Группировка.Использование = Истина;
	ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция Колонки() Экспорт
	Группировка = Таблица.Колонки.Добавить();
	Группировка.Использование = Истина;
	ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПараметрНастройки(ИмяПараметра, Значение) Экспорт
	Если Раздел = Разделы.ПараметрыВывода Тогда
		Параметр = Настройки.ПараметрыВывода.Элементы.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			ВызватьИсключение "Неизвестный параметр вывода " + ИмяПараметра;
		КонецЕсли;
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	ИначеЕсли Раздел = Разделы.ПараметрыДанных Тогда
		Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	Иначе
		ВызватьИсключение "Не задан контекст для параметра настройки СКД!";
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Структура() Экспорт
	Раздел = Разделы.Структура;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПараметрыДанных() Экспорт
	Раздел = Разделы.ПараметрыДанных;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПараметрыВывода() Экспорт
	Раздел = Разделы.ПараметрыВывода;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
Разделы = Новый Структура("Измерения, Реквизиты, Ресурсы, Условия, УсловноеОформление, Структура, Параметры, ПараметрыДанных, ПараметрыВывода", 1, 2, 3, 4, 5, 6, 7, 8, 9);

//  Добавление источника данных по-умолчанию
ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
ИсточникДанных.Имя = "ИсточникДанных";
ИсточникДанных.ТипИсточникаДанных = "Local";

НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных;
ВнешниеНаборыДанных = Новый Структура;

#КонецОбласти