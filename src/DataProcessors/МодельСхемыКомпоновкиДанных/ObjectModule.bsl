//  Подсистема "Модель отчета"
//	Автор: Калякин Андрей Г.
//  https://github.com/KalyakinAG/kassl
//  https://github.com/KalyakinAG/report-model

//@skip-check object-module-export-variable
//@skip-check module-accessibility-at-client

#Область ОписаниеПеременных

Перем СхемаКомпоновкиДанных Экспорт;
Перем НаборДанных;
Перем ПолеНабораДанных;
Перем ПолеРесурса;
Перем ВычисляемоеПоле;
Перем ПараметрСхемы;
Перем Раздел;
Перем Разделы;
Перем НомерПериода;
Перем Роль;
Перем ВнешниеНаборыДанных Экспорт;
Перем КолонкиНабораДанных;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция НаборДанныхЗапрос(ТекстЗапроса, ИмяНабораДанных = "НаборДанных") Экспорт
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИспользоватьГруппировкиЗапросаЕслиВозможно = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	Возврат ЭтотОбъект;
КонецФункции

Функция НаборДанныхОбъект(Данные, ИмяНабораДанных = "НаборДанных") Экспорт
	КолонкиНабораДанных = Данные.Колонки;
	ИмяОбъекта = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	ВнешниеНаборыДанных.Вставить(ИмяОбъекта, Данные);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.ИмяОбъекта = ИмяОбъекта;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	Возврат ЭтотОбъект;
КонецФункции

Функция Счет(ИмяПоля, Знач ПутьКДанным = Неопределено, ВыражениеВидаСчета = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыражениеВидаСчета) Тогда
		ВыражениеВидаСчета = ИмяПоля + "." + "Вид";
	КонецЕсли;
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Роль = ПолеНабораДанных.Роль;
	Если Раздел = Разделы.Измерения Тогда
		ПолеНабораДанных.Роль.Измерение = Истина;
	КонецЕсли;
	Роль.ВыражениеВидаСчета = ВыражениеВидаСчета;
	Если КолонкиНабораДанных <> Неопределено Тогда
		ПолеНабораДанных.ТипЗначения = КолонкиНабораДанных[ИмяПоля].ТипЗначения;		
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Поле(ИмяПоля, Знач ПутьКДанным = Неопределено, Выражение = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Роль = ПолеНабораДанных.Роль;
	Если Раздел = Разделы.Измерения Тогда
		ПолеНабораДанных.Роль.Измерение = Истина;
	ИначеЕсли Раздел = Разделы.Ресурсы Тогда
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		ПолеРесурса.Выражение = Выражение;
//		Если ЗначениеЗаполнено(Группировки) Тогда
//			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолеРесурса.Группировки, Группировки);
//		КонецЕсли;
	КонецЕсли;
	Если КолонкиНабораДанных <> Неопределено Тогда
		ПолеНабораДанных.ТипЗначения = КолонкиНабораДанных[ИмяПоля].ТипЗначения;		
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция ТипЗначения(Тип) Экспорт
	ПолеНабораДанных.ТипЗначения = Тип;
	Возврат ЭтотОбъект;
КонецФункции

//  Группировки
//  Массив, содержащий имена полей, для которых данное поле будет вычисляться в итогах. Через пробел после имени поля возможно указание ключевого слова Иерархия. Добавление данного ключевого слова обозначает, что выражение будет использоваться для иерархических записей группировки по полю, указанному перед словом, и всех вложенных группировок, для которых не задано собственное выражение данного ресурса. В случае, если массив пуст, итог будет вычисляться для всех полей. Может содержать строку ОбщийИтог для указания необходимости вычисления в общем итоге. 
Функция ВычисляемоеПоле(ИмяПоля, Знач ПутьКДанным = Неопределено, Выражение, ВыражениеИтога = Неопределено, Группировки = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИмяПоля;
	КонецЕсли;
	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
	ВычисляемоеПоле.Выражение = Выражение;
	Если Раздел = Разделы.Ресурсы Тогда
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		ПолеРесурса.Выражение = ?(ЗначениеЗаполнено(ВыражениеИтога), ВыражениеИтога, СтрШаблон("СУММА(%1)", ИмяПоля));
		Если ЗначениеЗаполнено(Группировки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолеРесурса.Группировки, Группировки);
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Обязательное() Экспорт
	Роль.Обязательное = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция Сумма(ИмяПоля, Знач ПутьКДанным = Неопределено) Экспорт
	Поле(ИмяПоля, ПутьКДанным, СтрШаблон("СУММА(%1)", ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяПоля)));
	Возврат ЭтотОбъект;
КонецФункции

Функция НачальныйОстаток(ИмяПоля, Знач ПутьКДанным = Неопределено, ИмяРесурса, ТипОстаткаДбКт = "Нет", ПолеСчета = "") Экспорт
	Если Раздел <> Разделы.Ресурсы Тогда
		ВызватьИсключение "Ресурсы указываются в разделе Ресурсов";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяРесурса) Тогда
		ВызватьИсключение "Для остатка необходимо определить имя ресурса";
	КонецЕсли;
	Сумма(ИмяПоля, ПутьКДанным);
	Роль.Остаток = Истина;
	Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
	Роль.ГруппаОстатка = ИмяРесурса;
	Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных[ТипОстаткаДбКт];
	Роль.ПолеСчета = ПолеСчета;
	Возврат ЭтотОбъект;
КонецФункции

Функция КонечныйОстаток(ИмяПоля, Знач ПутьКДанным = Неопределено, ИмяРесурса, ТипОстаткаДбКт = "Нет", ПолеСчета = "") Экспорт
	Если Раздел <> Разделы.Ресурсы Тогда
		ВызватьИсключение "Ресурсы указываются в разделе Ресурсов";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяРесурса) Тогда
		ВызватьИсключение "Для остатка необходимо определить имя ресурса";
	КонецЕсли;
	Сумма(ИмяПоля, ПутьКДанным);
	Роль.Остаток = Истина;
	Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
	Роль.ГруппаОстатка = ИмяРесурса;
	Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных[ТипОстаткаДбКт];
	Роль.ПолеСчета = ПолеСчета;
	Возврат ЭтотОбъект;
КонецФункции

// Период.
// 
// Параметры:
//  ИмяПоля - Строка - Имя поля
//  ПутьКДанным - Строка -  Путь к данным
//  Дополнительный - Булево -  данный период не определяет порядок для дочернего периода. Например
//   для секунды период день не является необходимым для порядка. Для Регистратора наоборот родительский период Секунда
//   определяет порядок
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельСхемыКомпоновкиДанных -  Период
Функция Период(ИмяПоля, Знач ПутьКДанным = Неопределено, Дополнительный = Ложь) Экспорт
	Поле(ИмяПоля, ПутьКДанным);
	НомерПериода = НомерПериода + 1;
	ПолеНабораДанных.Роль.НомерПериода = НомерПериода;
	ПолеНабораДанных.Роль.ТипПериода = ?(Дополнительный, ТипПериодаКомпоновкиДанных.Дополнительный, ТипПериодаКомпоновкиДанных.Основной);
	Возврат ЭтотОбъект;
КонецФункции

//  ПараметрСхемыКомпоновкиДанных
Функция Параметр(Имя, Значение = null, ТипЗначения = null) Экспорт
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = Имя;
	Если ТипЗначения <> null Тогда
		ПараметрСхемы.ТипЗначения = ТипЗначения;	
	КонецЕсли;
	Если Значение = null Тогда
		ПараметрСхемы.Значение = Значение;
	КонецЕсли;
	ПараметрСхемы.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	Возврат ЭтотОбъект;
КонецФункции

Функция Выражение(Выражение) Экспорт
	Если Раздел = Разделы.Параметры Тогда
		ПараметрСхемы.Выражение = Выражение;
		Возврат ЭтотОбъект;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Измерения() Экспорт
	Раздел = Разделы.Измерения;
	НомерПериода = 0;
	Возврат ЭтотОбъект;
КонецФункции

Функция Реквизиты() Экспорт
	Раздел = Разделы.Реквизиты;
	Возврат ЭтотОбъект;
КонецФункции

Функция Ресурсы() Экспорт
	Раздел = Разделы.Ресурсы;
	Возврат ЭтотОбъект;
КонецФункции

Функция Условия() Экспорт
	Раздел = Разделы.Условия;
	Возврат ЭтотОбъект;
КонецФункции

Функция УсловноеОформление() Экспорт
	Раздел = Разделы.УсловноеОформление;
	Возврат ЭтотОбъект;
КонецФункции

Функция Структура() Экспорт
	Раздел = Разделы.Структура;
	Возврат ЭтотОбъект;
КонецФункции

Функция Параметры() Экспорт
	Раздел = Разделы.Параметры;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Инициализация

СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
Разделы = Новый Структура("Измерения, Реквизиты, Ресурсы, Условия, УсловноеОформление, Структура, Параметры", 1, 2, 3, 4, 5, 6);

//  Добавление источника данных по-умолчанию
ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
ИсточникДанных.Имя = "ИсточникДанных";
ИсточникДанных.ТипИсточникаДанных = "Local";

ВнешниеНаборыДанных = Новый Структура;

#КонецОбласти